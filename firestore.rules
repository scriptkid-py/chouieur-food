rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the `isSignedIn()` helper function.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Centralizes the authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the `isOwner(userId)` helper function.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Centralizes the ownership check.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the `isExistingOwner(userId)` helper function.
     * Ensures that the user is the owner and the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces that a critical field cannot be changed during update.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Protects the relational integrity of the data.
     */
    function isImmutable(field) {
        return request.resource.data[field] == resource.data[field];
    }

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (get) User with UID 'user_abc' cannot read the profile at /users/user_xyz.
     * @deny (update) User with UID 'user_abc' cannot update the profile at /users/user_xyz.
     * @deny (delete) User with UID 'user_abc' cannot delete the profile at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to menu items.
     * @path /menu_items/{menuItemId}
     * @allow (get) Any user can read a menu item.
     * @allow (list) Any user can list menu items.
     * @deny (create) No user can create a menu item via client.
     * @deny (update) No user can update a menu item via client.
     * @deny (delete) No user can delete a menu item via client.
     * @principle Public read, no client writes.
     */
    match /menu_items/{menuItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to orders placed by users.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with UID 'user_abc' can create an order under /users/user_abc/orders/{orderId}.
     * @allow (get) User with UID 'user_abc' can read their order under /users/user_abc/orders/{orderId}.
     * @allow (update) User with UID 'user_abc' can update their order under /users/user_abc/orders/{orderId}.
     * @allow (delete) User with UID 'user_abc' can delete their order under /users/user_abc/orders/{orderId}.
     * @deny (create) User with UID 'user_abc' cannot create an order under /users/user_xyz/orders/{orderId}.
     * @deny (get) User with UID 'user_abc' cannot read an order under /users/user_xyz/orders/{orderId}.
     * @deny (update) User with UID 'user_abc' cannot update an order under /users/user_xyz/orders/{orderId}.
     * @deny (delete) User with UID 'user_abc' cannot delete an order under /users/user_xyz/orders/{orderId}.
     * @principle Enforces document ownership for all operations, validates relational integrity.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}