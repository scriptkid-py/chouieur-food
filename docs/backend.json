{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Chouieur Express application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "address": {
          "type": "string",
          "description": "User's address."
        },
        "role": {
          "type": "string",
          "description": "The role of the user, determining their access level.",
          "enum": [
            "admin",
            "kitchen",
            "customer"
          ]
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "role"
      ]
    },
    "MenuItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MenuItem",
      "type": "object",
      "description": "Represents an item on the Chouieur Express menu.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the menu item."
        },
        "name": {
          "type": "string",
          "description": "Name of the menu item."
        },
        "description": {
          "type": "string",
          "description": "Description of the menu item."
        },
        "price": {
          "type": "number",
          "description": "Price of the menu item in DA (Algerian Dinar)."
        },
        "category": {
          "type": "string",
          "description": "Category of the menu item (e.g., Sandwich, Pizza)."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image for the menu item.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "category"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date and time the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, confirmed, delivered)."
        },
        "items": {
          "type": "array",
          "description": "List of items in the order.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status",
        "items"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "google.com",
      "apple.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/menu_items/{menuItemId}",
        "definition": {
          "entityName": "MenuItem",
          "schema": {
            "$ref": "#/backend/entities/MenuItem"
          },
          "description": "Stores the details of each menu item available for order.",
          "params": [
            {
              "name": "menuItemId",
              "description": "The unique identifier for the menu item."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders placed by users. Follows hierarchical path for user-owned data. Ensures that only the authenticated user can access their orders. This enables secure list operations.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user placing the order, corresponding to their Firebase Auth UID."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, DBAC, and support secure list operations (QAPs). User data is stored under `/users/{userId}`. Menu items are stored in a global `/menu_items` collection. Orders are stored under `/users/{userId}/orders/{orderId}` to establish clear ownership and simplify security rules. By nesting orders within the user document, we can avoid complex `get()` calls in our security rules, ensuring that only the authenticated user can access their orders. This design ensures authorization independence by eliminating dependencies on parent documents for access control. Each collection has a homogenous security posture, preventing accidental exposure of sensitive data. This structure supports the required QAPs because list operations on orders are scoped to the authenticated user, preventing unauthorized access. The structure ensures that only the authenticated user can access and manage their order data."
  }
}